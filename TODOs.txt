CREST SITE
* Autogenerate sitemap.xml

CREST
* Add caching layer (?)
* Proper integration test of CRest
* Should AuthentificationManager be at the RestService level instead than implemented as an RequestInterceptor?
  Pros: - adds authentification informations just before firing request, no one can possibly modify it after
  Cons: - What about the possibility of authentifying some methods and some not?
* ******************DONE******************** Should deprecate @Param, @Name, @Destination and use instead:
  ******************DONE************************ But what about @Serializer/@Injector then ?? ****
  ******************DONE************************   @QueryParam(name="my-name",def="default value")
  ******************DONE************************   @PathParam(name="my-name",def="default value")
  ******************DONE************************   @FormParam(name="my-name",def="default value")
  ******************DONE************************   @HeaderParam(name="my-name",def="default value")
  ******************DONE************************   @QueryParams({
  ******************DONE************************     @QueryParam(name="my-static-param",def="default value"),
  ******************DONE************************     @QueryParam(name="my-static-param2",def="default value")
  ******************DONE************************   })
  ******************DONE************************   interface A {
  ******************DONE************************         @Path("/{string}/")
  ******************DONE************************         @HeaderParam(name="method-header",def="value")
  ******************DONE************************         void m(
  ******************DONE************************             @PathParam(name="string",def="stringvalue") String s,
  ******************DONE************************             @QueryParam(name="count",def="10") int b);
  ******************DONE************************         ----> /stringvalue/?count=10
  ******************DONE************************   }
* ******************DONE************************   NOT APPLICABLE ANYMORE Does it work to pass JSON in the HttpRequest.Builder.addQueryParam etc.. or should it be encoded ? Could conflict with placeholder syntax! escape placeholder syntax on add and unescape it on build!
*   ******************DONE************************   Totally remove ability to put query string in @Path ? Scenarios as google translate (pair=en-fr) can be resolve by passing a LangPair object that way:
    ******************DONE************************   translate(@Serializer(LangPairSerializer.class) @QueryParam("langpair") LangPair langpair)
    ******************DONE************************   - pros: decrease HttpRequestBuilder complexity and processing time
    ******************DONE************************   - cons: wouldn't be possible in a pure JAX-RS style, isn't? (or maybe with toString() on LangPair object,JAX-RS style, but that sucks)

******************DONE************************    Write run-optional integration test for sample: ensuring that all changes are still compatible with sample apis is a good real-life usecase
******************DONE************************    Placeholder in annotations
* Should it fail at Factory time or at runtime when configuration do not contains param name ? Param name are mandatory now... make it fail at factory time!





