CREST SITE
* Autogenerate sitemap.xml

CREST
* Add caching layer (?)
* Proper integration test of CRest
* Should AuthentificationManager be at the RestService level instead than implemented as an RequestInterceptor?
  Pros: - adds authentification informations just before firing request, no one can possibly modify it after
  Cons: - What about the possibility of authentifying some methods and some not?
* Should deprecate @Param, @Name, @Destination and use instead:
  **** But what about @Serializer/@Injector then ?? ****
  @QueryParam(name="my-name",def="default value")
  @PathParam(name="my-name",def="default value")
  @FormParam(name="my-name",def="default value")
  @HeaderParam(name="my-name",def="default value")


  @QueryParams({
    @QueryParam(name="my-static-param",def="default value"),
    @QueryParam(name="my-static-param2",def="default value")
  })
  interface A {

        @Path("/{string}/")
        @HeaderParam(name="method-header",def="value")
        void m(
            @PathParam(name="string",def="stringvalue") String s,
            @QueryParam(name="count",def="10") int b);

        ----> /stringvalue/?count=10
  }
* Does it work to pass JSON in the HttpRequest.Builder.addQueryParam etc.. or should it be encoded ? Could conflict with placeholder syntax!
* Should it fail at Factory time or at runtime when configuration do not contains param name ? Param name are mandatory now...
* Write run-optional integration test for sample: ensuring that all changes are still compatible with sample apis is a good real-life usecase