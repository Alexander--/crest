    ------
    OAuth
    ------
        
OAuth

    <<CRest>> offers a pre-authentified <<<OAuth v1.0>>> request authentification mechanism implemented as an interceptor (<<<org.codegist.crest.interceptor.OAuthInterceptor>>>).

    All you need to provide are four information:

        * Consumer Token

        * Consumer Secret

        * Access Token

        * Access Token Secret

    Given that, the following: 

+-----
CRest crest = new CRestBuilder()
                    .usePreauthentifiedOAuth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
                    .build();
+-----

        will create a <<<CRest>>> with an instance of <<<OAuthInterceptor>>> set as a global request interceptor. Any interface that will be passed to this crest instance will gets all its http request authentified using OAuth v1.0.

        Another way to get the same result is by settings the interceptor manually on the interface:

+-----
@EndPoint("http://api.twitter.com")
@ContextPath("/1/statuses")
@GlobalInterceptor(OAuthInterceptor.class)
public interface StatusService {

    @HttpMethod(POST)
    @Path("/update.json")
    @Destination(BODY)
    Status updateStatus(@Name("status") String status);

    @Path("/show/{0}.json")
    Status getStatus(long id);
}
+-----

        and to give the <<<CRest>>> the information required by the <<<OAuthInterceptor>>> to generate the authentification meta datas:

+-----
CRest crest = new CRestBuilder()
                     .addProperty(CRestProperty.OAUTH_ACCESS_TOKEN, accessToken)
                     .addProperty(CRestProperty.OAUTH_ACCESS_TOKEN_SECRET, accessTokenSecret)
                     .addProperty(CRestProperty.OAUTH_CONSUMER_KEY, consumerKey)
                     .addProperty(CRestProperty.OAUTH_CONSUMER_SECRET, consumerSecret)
                     .build();
+-----

        Alternatively, if you only need to authentify some methods and some not, you can do it as follow:

+-----
@EndPoint("http://api.twitter.com")
@ContextPath("/1/statuses")
public interface StatusService {


    @HttpMethod(POST)
    @Path("/update.json")
    @Destination(BODY)
    @RequestInterceptor(OAuthInterceptor.class)
    Status updateStatus(@Name("status") String status);  /* will use oauth authentification */

    @Path("/show/{0}.json")
    Status getStatus(long id); /* not authentified method */
}
+-----