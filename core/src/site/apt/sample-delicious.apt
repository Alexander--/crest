    -----
    Delicious Samples
    -----

Delicious Samples

    This sample contains the implementation of a some {{{http://www.delicious.com/help/api} Delicious Rest APIs}}.

    This example shows how to handle:

        * Non consistent response format.

        * Injecting in the request a user-specific object passed as an argument in a service method.

        * Handle Yahoo! OAuth implementation: Access tokens expire after an hour an need to be refreshed.

    <NB: The following are partial mappings of the available services and their main purpose is to give a quick example of a real world use case scenario of CRest usage, thus the mappings may not reflect all the services offered by the API.>

* Interface

    This sample maps some of the Delicious's {{{http://www.delicious.com/help/api} Rest APIs}}.

    Below the mapped interface. <Note: the mapping below only shows some mapped method, to have a look at all of them, refer to the sample source code.>

+-----
@EndPoint("http://api.del.icio.us/v2")
@RetryHandler(RefreshAuthentificationRetryHandler.class) /* This retry handler will automatically try to refresh the access token if a 401 exception is caught */
@ResponseHandler(DeliciousResponseHandler.class)
public interface Delicious {

    @Path("/posts/recent")
    Posts getRecentsPosts();

    @Path("/posts/recent")
    Posts getRecentsPosts(
            @QueryParam("tag") String tag,
            @QueryParam("count") int count);

    @Path("/posts/add")
    boolean addPost(
            @QueryParam("url") String url,
            @QueryParam("description") String description,
            @QueryParam("extended") String extended,
            @QueryParam("tags") String[] tags,
            @QueryParam("stamp") Date stamp,
            @QueryParam("replace") boolean replace,
            @QueryParam("shared") boolean shared);

    @Path("/posts/all")
    Posts getAllPosts(
            @QueryParam("tag") String tag,
            @QueryParam("range") Range resultRange,
            @QueryParam("fromdt") Date from,
            @QueryParam("todt") Date to,
            @QueryParam("meta") Boolean meta);

    @Path("/tags/bundles/set")
    boolean setTagBundle(
            @QueryParam("bundle") String name,
            @QueryParam("tags") String... tags);

    (...)

}
+-----

    And here's how to get an instance of the <<<Flickr>>>:

+-----
// Get a CRest instance. Should be done once.
/* Get the factory */
CRest crest = new CRestBuilder()
                .expectsXml(DeliciousModelFactory.class)
                .setListSerializerSeparator(" ")
                .setBooleanSerializer("yes", "no")
                .usePreauthentifiedOAuth(consumerKey, consumerSecret, accessToken, accessTokenSecret)
                /* URL to use to refresh the expired access token */
                .setProperty(CRestProperty.OAUTH_ACCESS_TOKEN_REFRESH_URL, "https://api.login.yahoo.com/oauth/v2/get_token")
                /* extras non oauth-standard token entry */
                .setProperty(CRestProperty.OAUTH_ACCESS_TOKEN_EXTRAS, new HashMap<String, String>() {{
                    put("oauth_session_handle", sessionHandle);
                }})
                .build();

// get a service instance
Delicious delicious = crest.build(Delicious.class);

// use it !
Posts posts = delicious.getAllPosts("opensource", new Range(1,15), dateFrom, dateTo, metas);
boolean done = delicious.renameTag("os", "opensource");
(...)
+-----

* Response Handler

    Here is the code for the custom response handling. This class is not stricly necessary as we could have always returned the generic Response object for every method whatever happens, but this approach makes the interface looks better and less coupled to the flickr response format.

+-----
public class DeliciousResponseHandler implements ResponseHandler {

    private final Marshaller marshaller;

    public DeliciousResponseHandler(Map<String, Object> properties) {
        this.marshaller = (Marshaller) properties.get(Marshaller.class.getName());
        Validate.notNull(this.marshaller, "No marshaller set, please construct CRest using either JSON or XML expected return type.");
    }

    public Object handle(ResponseContext responseContext) throws CRestException {
        Type expectedType = responseContext.getExpectedGenericType();
        Object response = marshaller.marshall(responseContext.getResponse().asReader(), expectedType);
        if (response instanceof Result) {
            Result result = (Result) response;
            // Delicious Result response format is not consistent
            boolean done =
                    "done".equalsIgnoreCase(result.getCode())
                            || "done".equalsIgnoreCase(result.getValue())
                            || "ok".equalsIgnoreCase(result.getValue());
            // If expected return type is boolean, then return either true/false
            if (boolean.class.equals(expectedType) || Boolean.class.equals(expectedType)) {
                return done;
            } else if (!done) {
                // If a response type other than boolean is expected and result is false, then throw an exception.
                throw new CRestException(Strings.defaultIfBlank(result.getCode(), result.getValue()));
            } else {
                // Shouldn't reach here.
                // Response type is an instance of Result only if an error happened or if the expected return type is either true/false
                throw new IllegalStateException("Should not reach here");
            }
        } else {
            return response;
        }
    }
}
+-----

* User specific Injector

     Here is the code to tell CRest how to inject the user-specific Range object into the request.

+-----
public class RangeInjector implements Injector<Range> {
    public void inject(HttpRequest.Builder builder, ParamContext<Range> context) {
        if (context.getRawValue() == null) return;
        Range r = context.getRawValue();
        Destination dest = context.getParamConfig().getDestination();
        builder.addParam("start", r.getStart(), dest)
               .addParam("results", r.getResults(), dest);
    }
}
+-----

And here is the Range object definition :

+-----
@Injector(RangeInjector.class)  /* Parameter specific annotation applied to a type */
public class Range {
    private final int start;
    private final int results;
    (...)
}
+-----

* Model & Sources

    The data model used by these samples hasn't been documented in this page as it only limits itself to plain java bean objects. The model have been deduced from the API response format and documentation and isn't guaranteed to reflect the full available model the API offers.

    Do get a look at it, please refer to the sample source code {{{./sample/xref/index.html} HTML-based version}}.

    This code is part of a project containing more sample, go to the {{{./sample/index.html} project home page}} to get more information.
