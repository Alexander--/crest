    -----
    Flickr Samples
    -----

Flickr Samples

    This sample contains the implementation of a some {{{http://www.flickr.com/services/api/} Flickr Rest APIs}}.

    This example is more complex than the Google or Twitter ones as it requires a bit of implementation for :

        * Flickr specific authentification method.

        * Response handling : Flickr error-specific checking and payload extraction from generic response format, similar process as the google sample.

        * Param serialization : Flickr handle boolean as 0/1 values, we show here how to still use boolean argument and serialize them the way Flickr expects. 

    <NB: The following are partial mappings of the available services and their main purpose is to give a quick example of a real world use case scenario of CRest usage, thus the mappings may not reflect all the services offered by the API.>

* Interface

    This sample maps some of the Flickr's {{{http://www.flickr.com/services/api/} Rest APIs}}.

    Below the mapped interface. <Note: the mapping below only shows some mapped method, to have a look at all of them, refer to the sample source code.>

+-----
@EndPoint("http://flickr.com")
@ContextPath("/services")
@GlobalInterceptor(FlickrAuthInterceptor.class) /* Global request interceptor : generates and adds flickr's specific authentification parameter in the request */
@ResponseHandler(FlickrResponseHandler.class)   /* Custom response handler for flickr-specific error checking and payload extraction */
@POST                                           /* Shortcut to set all method to use POST instead of default GET */
public interface Flickr {

    (...)

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.galleries.create")
    Gallery newGallery(
            @FormParam("title") String title,
            @FormParam("description") String description);

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.comments.addComment")
    String comment(
            @QueryParam("photo_id") long photoId,
            @QueryParam("comment_text") String comment);

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.comments.editComment")
    void editComment(
            @QueryParam("comment_id") String commentId,
            @QueryParam("comment_text") String comment);

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.comments.getList")
    Comment[] getComments(@QueryParam("photo_id") long photoId);

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.comments.getList")
    Comment[] getComments(
            @QueryParam("photo_id") long photoId,
            @QueryParam("min_comment_date") Date from,
            @QueryParam("max_comment_date") Date to);

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.comments.deleteComment")
    void deleteComment(@QueryParam("comment_id") String commentId);


    @Path("/upload") @Destination(BODY)
    long uploadPhoto(@Name("photo") File photo);

    @Path("/upload")
    @Param(name="async", value="1", dest = BODY) /* adds a default parameter async=1 in the body */
    @Destination(BODY)
    String asyncUploadPhoto(@Name("photo") File photo);

    @Path("/upload")
    long uploadPhoto(@FormParam("photo") File photo);

    @Path("/upload")
    long uploadPhoto(@FormParam("photo") InputStream photo);

    @Path("/upload")
    @FormParam(value = "async", defaultValue = "1")
    String asyncUploadPhoto(@FormParam("photo") File photo);

    @Path("/upload")
    @FormParam(value = "async", defaultValue = "1")
    String asyncUploadPhoto(@FormParam("photo") InputStream photo);

    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.upload.checkTickets")
    Uploader checkUploads(@QueryParam("tickets") String... tickets);


    @Path("/rest")
    @QueryParam(value = "method", defaultValue = "flickr.photos.delete")
    void deletePhoto(@FormParam("photo_id") long photoId);

    (...)
}
+-----

    And here's how to get an instance of the <<<Flickr>>>:

+-----
// Get a CRest instance. Should be done once.
/* Get the factory */
CRest crest = new CRestBuilder()
                     .useHttpClientRestService()
                     .expectsXml(FlickrModelFactory.class)
                     .setDateSerializerFormat("Seconds")
                     .setBooleanSerializer("1", "0")
                     .setProperty(FlickrAuthInterceptor.API_KEY_PROP, apiKey)
                     .setProperty(FlickrAuthInterceptor.APP_SECRET_PROP, appSecret)
                     .setProperty(FlickrAuthInterceptor.AUTH_TOKEN_PROP, authToken)
                     .build();

// get a service instance
Flickr flickr = crest.build(Flickr.class);

// use it !
String ticket = flickr.asyncUploadPhoto(new File("/path/to/my/photo.jpg"));
(...)
Uploader upload = flickr.checkUploads(ticket);
(...)
+-----

* Response Handler

    Here is the code for the custom response handling. This class is not stricly necessary as we could have always returned the generic Response object for every method whatever happens, but this approach makes the interface looks better and less coupled to the flickr response format.

+-----
public class FlickrResponseHandler implements ResponseHandler {

    private final Marshaller marshaller;

    public FlickrResponseHandler(Map<String, Object> properties) {
        this.marshaller = (Marshaller) properties.get(Marshaller.class.getName());
        Validate.notNull(this.marshaller, "No marshaller set, please construct CRest using either JSON or XML expected return type.");
    }

    public final Object handle(ResponseContext context) {
        /* Marshall the response */
        Response res = marshaller.marshall(context.getResponse().asReader(), Types.newType(Response.class, context.getExpectedGenericType()));
        /* Check for flickr OK status */
        if ("ok".equals(res.getStatus())) {
            /* Get the nested payload and returns it */
            Payload payload = res.getPayload();
            if (payload instanceof SimplePayload) {
                return ((SimplePayload) payload).getValue();
            } else {
                return payload;
            }
        } else {
            if (res.getPayload() instanceof Error) {
                /* Status is not OK, try to get the error cause */
                Error error = ((Error) res.getPayload());
                throw new CRestException(error.getMsg() + " (code=" + error.getCode() + ")");
            } else {
                /* Response format is not the one expected. */
                throw new CRestException("Unkown error");
            }
        }
    }
}
+-----

* Authenticator

     The FlickrAuthInterceptor implements the signing logic part of {{{http://www.flickr.com/services/api/auth.howto.desktop.html} Flickr's authentification mechanism}}, assuming we already have a authentified token available.

     For more details, checkout the {{{./sample/index.html} sample project page}} or browse directly the {{{./sample/xref/index.html} source code}}.

* Model & Sources

    The data model used by these samples hasn't been documented in this page as it only limits itself to plain java bean objects. The model have been deduced from the API response format and documentation and isn't guaranteed to reflect the full available model the API offers.

    Do get a look at it, please refer to the sample source code {{{./sample/xref/index.html} HTML-based version}}.

    This code is part of a project containing more sample, go to the {{{./sample/index.html} project home page}} to get more information.
